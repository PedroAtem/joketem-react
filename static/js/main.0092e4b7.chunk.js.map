{"version":3,"sources":["logo.svg","components/button/index.jsx","components/input/index.jsx","service/jokeApi.js","actions/index.js","actions/actionTypes.js","pages/home/index.jsx","components/joke/index.jsx","pages/joke/index.jsx","routes.js","App.js","serviceWorker.js","reducers/jokeReducer.js","reducers/nameReducer.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","Home","onClick","this","props","click","disabled","text","Component","Input","label","value","change","placeholder","onChange","jokeApi","axios","create","baseURL","updateJoke","dispatch","a","async","type","show","get","response","joke","data","updateName","name","HomePage","goJoke","history","push","className","e","target","connect","store","nameState","bindActionCreators","Joke","JokePage","queryString","parse","location","search","loading","jokeState","Routes","basename","path","component","App","src","logo","alt","Boolean","window","hostname","match","initialState","Reducers","combineReducers","state","action","Store","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","createBrowserHistory","process"],"mappings":"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","file":"static/js/main.0092e4b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.84e66372.svg\";","import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return <button onClick={this.props.click} disabled={this.props.disabled}>{this.props.text}</button>;\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\n\r\nclass Input extends Component {\r\n    render() {\r\n        const { label, value, change } = this.props;\r\n\r\n        return <input placeholder={label} value={value} onChange={change} />;\r\n    }\r\n}\r\n\r\nexport default Input;","import axios from 'axios';\r\n\r\nconst jokeApi = axios.create({ baseURL: 'https://geek-jokes.sameerkumar.website/api' });\r\n\r\nexport default jokeApi;","import { JOKE_UPDATE_VALUE, LOADING_UPDATE_VALUE, NAME_UPDATE_VALUE } from './actionTypes';\r\nimport jokeApi from '../service/jokeApi';\r\n\r\nexport const updateJoke = () => {\r\n    return async dispatch => {\r\n        dispatch({ type: LOADING_UPDATE_VALUE, show: true });\r\n        const response = await jokeApi.get();\r\n        dispatch({ type: JOKE_UPDATE_VALUE, joke: response.data });\r\n        dispatch({ type: LOADING_UPDATE_VALUE, show: false });\r\n    }\r\n};\r\n\r\nexport const updateName = name => ({ type: NAME_UPDATE_VALUE, name })","export const JOKE_UPDATE_VALUE = 'JOKE_UPDATE_VALUE';\r\nexport const LOADING_UPDATE_VALUE = 'LOADING_UPDATE_VALUE';\r\nexport const NAME_UPDATE_VALUE = 'NAME_UPDATE_VALUE';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport Button from '../../components/button';\r\nimport Input from '../../components/input';\r\n\r\nimport { updateName } from '../../actions'\r\n\r\nimport './style.css';\r\n\r\nclass HomePage extends Component {\r\n    goJoke = () => {\r\n        const { name } = this.props;\r\n        this.props.history.push(`/joke${ name ? `?name=${name}` : `` }`);\r\n    }\r\n\r\n    render() {\r\n        const { goJoke } = this;\r\n        const { name, updateName } = this.props;\r\n\r\n        return (\r\n            <div className=\"home\">\r\n                <h1>JOKETEM</h1>\r\n                <Input type=\"text\" label=\"What's your name?\" value={name} change={e => updateName(e.target.value) }></Input>\r\n                <Button click={() => goJoke()} text=\"Go forward!\"></Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => ({\r\n    name: store.nameState.name\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ updateName }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\n\r\nclass Joke extends Component {\r\n    render() {\r\n        return <div className=\"joke-container\">{this.props.text}</div>;\r\n    }\r\n}\r\n\r\nexport default Joke;","import React, { Component } from 'react';\r\nimport queryString from 'query-string';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport Button from '../../components/button';\r\nimport Joke from '../../components/joke';\r\n\r\nimport { updateJoke, updateName } from '../../actions'\r\n\r\nimport './style.css';\r\n\r\nclass JokePage extends Component {\r\n    componentDidMount() {\r\n        const queryParams = queryString.parse(this.props.location.search)\r\n        const { name } = queryParams;\r\n        if (name) {\r\n            this.props.updateName(name);\r\n        }\r\n        this.props.updateJoke();\r\n    }\r\n\r\n    render() {\r\n        const { name, joke, loading, updateJoke } = this.props;\r\n\r\n        return (\r\n            <div className=\"joke\">\r\n                <h1>Hello { name ? name : 'Stranger' }!!!</h1>\r\n                <Button disabled={loading} click={() => updateJoke()} text={loading ? 'Getting Joke...' : 'Get Joke!'}></Button>\r\n                <Joke text={joke}></Joke>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => ({\r\n    joke: store.jokeState.joke,\r\n    loading: store.jokeState.loading,\r\n    name: store.nameState.name\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ updateJoke, updateName }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JokePage);","import React from 'react';\r\n\r\nimport { Switch, Route, HashRouter } from 'react-router-dom';\r\n\r\nimport HomePage from './pages/home';\r\nimport JokePage from './pages/joke';\r\n\r\nconst Routes = () => (\r\n    <HashRouter basename=\"/joketem-react/\">\r\n        <Switch>\r\n            <Route path={`/joke`} component={JokePage}></Route>\r\n            <Route path={`/`} component={HomePage}></Route>\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\nimport Routes from './routes';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Routes></Routes>\r\n      <img className=\"logo\" src={logo} alt=\"\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { JOKE_UPDATE_VALUE, LOADING_UPDATE_VALUE } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    joke: '',\r\n    loading: false\r\n};\r\n\r\nexport const jokeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case JOKE_UPDATE_VALUE:\r\n            return {\r\n                ...state,\r\n                joke: action.joke\r\n            }\r\n        case LOADING_UPDATE_VALUE:\r\n            return {\r\n                ...state,\r\n                loading: action.show\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { NAME_UPDATE_VALUE } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    name: ''\r\n};\r\n\r\nexport const nameReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case NAME_UPDATE_VALUE:\r\n            return {\r\n                ...state,\r\n                name: action.name\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport { jokeReducer } from './jokeReducer';\r\nimport { nameReducer } from './nameReducer';\r\n\r\nexport const Reducers = combineReducers({\r\n  jokeState: jokeReducer,\r\n  nameState: nameReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { Reducers } from '../reducers';\r\nimport ReduxThunk from 'redux-thunk';\r\n\r\nexport const Store = createStore(Reducers, {}, applyMiddleware(ReduxThunk));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { Store } from './store';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nReactDOM.render(<Provider store={Store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\nexport const history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\r\n"],"sourceRoot":""}